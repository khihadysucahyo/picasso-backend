{"version":3,"sources":["../index.js"],"names":["bodyParser","require","mongoose","express","helmet","cors","path","fileUpload","env","process","NODE_ENV","config","resolve","cwd","Error","err","authenticate","app","db","mongoURI","use","urlencoded","extended","json","connectWithRetry","connect","useNewUrlParser","useUnifiedTopology","console","error","setTimeout","log","Promise","global","set","models","route","listen"],"mappings":";;AAAA,MAAMA,aAAaC,QAAQ,aAAR,CAAnB;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,MAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,MAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,MAAMK,OAAOL,QAAQ,MAAR,CAAb;AACA,MAAMM,aAAaN,QAAQ,oBAAR,CAAnB;;AAEA;AACA,MAAMO,MAAMC,QAAQD,GAAR,CAAYE,QAAxB;AACA,IAAI;AACA,YAAOF,GAAP;AACI,aAAK,WAAL;AACIP,oBAAQ,QAAR,EAAkBU,MAAlB;AACA;AACJ,aAAK,aAAL;AACIV,oBAAQ,QAAR,EAAkBU,MAAlB,CAAyB;AACrBL,sBAAMA,KAAKM,OAAL,CAAaH,QAAQI,GAAR,EAAb,EAA4B,YAA5B;AADe,aAAzB;AAGA;AACJ;AACIC,kBAAM,0BAAN;AAVR;AAYH,CAbD,CAaE,OAAOC,GAAP,EAAY;AACVD,UAAM,0BAAN;AACH;;AAED,MAAME,eAAef,QAAQ,4BAAR,CAArB;;AAEA,MAAMgB,MAAMd,SAAZ;AACA,MAAMe,KAAKjB,QAAQ,kBAAR,EAA4BkB,QAAvC;;AAEA;AACAF,IAAIG,GAAJ,CAAQf,MAAR;AACAY,IAAIG,GAAJ,CAAQhB,QAAR;AACAa,IAAIG,GAAJ,CAAQpB,WAAWqB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAL,IAAIG,GAAJ,CAAQpB,WAAWuB,IAAX,EAAR;AACAN,IAAIG,GAAJ,CAAQb,YAAR;;AAEA,MAAMiB,mBAAmB,YAAW;AAChC,WAAOtB,SAASuB,OAAT,CAAiBP,EAAjB,EAAqB,EAAEQ,iBAAiB,IAAnB,EAAyBC,oBAAoB,IAA7C,EAArB,EAA0E,UAASZ,GAAT,EAAc;AAC3F,YAAIA,GAAJ,EAAS;AACLa,oBAAQC,KAAR,CAAc,2DAAd,EAA2Ed,GAA3E;AACAe,uBAAWN,gBAAX,EAA6B,IAA7B;AACH,SAHD,MAGO;AACHI,oBAAQG,GAAR,CAAY,mBAAZ;AACH;AACJ,KAPM,CAAP;AAQH,CATD;AAUAP;;AAEAtB,SAAS8B,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAf,IAAIG,GAAJ,CAAQJ,YAAR;;AAEA;AACAC,IAAIiB,GAAJ,CAAQ,QAAR,EAAkBhC,SAASiC,MAA3B;;AAEA;AACA,MAAMC,QAAQnC,QAAQ,UAAR,CAAd;;AAEA;AACAgB,IAAIG,GAAJ,CAAQ,cAAR,EAAwBgB,KAAxB;;AAEAnB,IAAIoB,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBT,YAAQG,GAAR,CAAa,4CAAb;AACH,CAFD","file":"index.js","sourcesContent":["const bodyParser = require(\"body-parser\")\nconst mongoose = require(\"mongoose\")\nconst express = require(\"express\")\nconst helmet = require('helmet')\nconst cors = require('cors')\nconst path = require('path')\nconst fileUpload = require('express-fileupload')\n\n// Import middleware\nconst env = process.env.NODE_ENV\ntry {\n    switch(env) {\n        case 'undefined':\n            require('dotenv').config();\n            break\n        case 'development':\n            require('dotenv').config({\n                path: path.resolve(process.cwd(), '../../.env'),\n            })\n            break\n        default:\n            Error('Unrecognized Environment')\n    }\n} catch (err) {\n    Error('Error trying to run file')\n}\n\nconst authenticate = require('./controllers/authenticate')\n\nconst app = express()\nconst db = require(\"./utils/database\").mongoURI\n\n// default options\napp.use(cors())\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(fileUpload())\n\nconst connectWithRetry = function() {\n    return mongoose.connect(db, { useNewUrlParser: true, useUnifiedTopology: true }, function(err) {\n        if (err) {\n            console.error('Failed to connect to mongo on startup - retrying in 5 sec', err);\n            setTimeout(connectWithRetry, 5000);\n        } else {\n            console.log(\"mongoDB Connected\")\n        }\n    });\n};\nconnectWithRetry();\n\nmongoose.Promise = global.Promise\n\n// Authentications\napp.use(authenticate)\n\n// Import models\napp.set('models', mongoose.models)\n\n// Import modules\nconst route = require('./routes')\n\n//routes\napp.use('/api/logbook', route)\n\napp.listen(8202, () => {\n    console.log(`Api Logbook service listening on port 8202`)\n})\n\n\n\n"]}